const rfg = require("rfg-api").init();
const path = require("path");
const HtmlWebpackPlugin = require("html-webpack-plugin");

const pluginName = "FaviconsWebpackPlugin";

class FaviconsWebpackPlugin {
    // Check we were given the correct options
    constructor(options) {
        const { faviconJson, outputPath } = options;
        if (!faviconJson)
            throw new Error(`${pluginName}: Missing faviconJson option`);
        if (!outputPath)
            throw new Error(`${pluginName}: Missing outputPath option`);

        this.options = options;
    }

    // Get faviconJsonPath - RealPath
    getFullfaviconJsonPath(template, context) {
        if (template === 'auto') {
            template = path.resolve(context, 'src/index.ejs');
            if (!fs.existsSync(template)) {
                template = path.join(__dirname, 'default_index.ejs');
            }
        }
        // Resolve faviconJson path
        return template.replace(
            /([!])([^/\\][^!?]+|[^/\\!?])($|\?[^!?\n]+$)/,
            (match, prefix, filepath, postfix) => prefix + path.resolve(filepath) + postfix);
    }

    // Generate and write favicon images
    generateFavicons(cb) {
        rfg.generateFavicon(this.request, this.outputPath, cb);
    }

    // This is the function Webpack calls during compilation
    apply(compiler) {
        /*
        * Hook into https://webpack.js.org/api/compiler-hooks#thiscompilation
        * for the initial setup
        */

        compiler.hooks.thisCompilation.tap(pluginName, compilation => {

            const jsonPath = this.getFullfaviconJsonPath(this.options.faviconJson, compiler.context);
            const json = require(jsonPath);

            const opts = {
                apiKey: "bbb59148ba6ec87ccb4bc14ec327d982a9e8ce3d",
                masterPicture: json.masterPicture,
                iconsPath: json.iconsPath,
                design: json.design,
                settings: json.settings,
                versioning: json.versioning
            };

            this.request = rfg.createRequest(opts);
            this.outputPath = path.join(compiler.options.output.path, this.options.outputPath);

            /*
            * If we are injecting into some HTML, do the work once html-webpack-plugin is
            * ready to emit assets https://github.com/jantimon/html-webpack-plugin#beforeemit-hook
            */
            if (this.options.inject === true) {
                HtmlWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync(pluginName, (data, cb) => {
                    this.generateFavicons((err, res) => {
                        if (err) return cb(err);
                        data.html = data.html.replace(
                            "</head>", '<!-- Site favicons - Generated by FWP:@chapiter/favicons-webpack-plugin -->' +
                            res.favicon.html_code + "</head>"
                        );
                        cb(null, data);
                    });
                });
            }

            // Gernratefavicons for webpack `dist` or `build` folder
            compiler.hooks.afterEmit.tapAsync(pluginName, (compilation, cb) => {
                this.generateFavicons((err) => {
                    if (err) return cb(err);
                    cb(null, compilation);
                });
            });

        });

        /*
        * If we're not injecting, generate the favicons just before Webpack
        * emits assets https://webpack.js.org/api/compiler-hooks/#emit
        */
        if (this.options.inject !== true) {
            compiler.hooks.afterEmit.tapAsync(pluginName, (compilation, cb) => {
                this.generateFavicons((err) => {
                    if (err) return cb(err);
                    cb(null, compilation);
                });
            });
        }


    }
}

module.exports = FaviconsWebpackPlugin;
